from turtle import Screen
from RGB import RGB


class CustomScreen:
    """
    The CustomScreen® Module.
    For simple customization of the Turtle-Screen.
    Created specifically for the ModernArt® module.
    Utilizes the RGB® color module to generate colors.

    author: MKinG©™
    """

    def __init__(self, width=1280, height=720):
        """
        Initializes the CustomScreen® object with specified width and height.
        - default background color is a random color generated by the RGB® color module
        - default screen resolutions is 1280 × 720 : (16:9, HD 720p)

        :param width: Width of the screen. Default is 1280.
        :param height: Height of the screen. Default is 720.
        """

        # Create turtle.Screen() object
        self.screen = Screen()

        # Attributes for screen object
        self.attr = {
            'bgcolor': RGB().hex,  # Set a random background color
            'width': width,
            'height': height,
            'start_x': None,  # Start at the center by default (x-coordinate)
            'start_y': None,  # Start at the center by default (y-coordinate)
        }

    def __repr__(self):
        """Representation of CustomScreen® object."""
        return f"CustomScreen® Object ⧉ W:{self.attr['width']} × H:{self.attr['height']} | ID:{id(self)}"

    @property
    def screen_size(self) -> tuple:
        """
        Retrieves the pixel size of the screen.
        # Feature: get width and height to reset the screen size

        :return: A tuple containing the width and height of the screen.
        """

        return self.attr['width'], self.attr['height']

    def screen_setup(self, bgcolor=None, start_x=None, start_y=None, title=None) -> None:
        """
        Set up the screen with specified attributes.

        :param bgcolor: Background color of the screen.
        :param start_x: Starting x-coordinate of the screen. Default is center.
        :param start_y: Starting y-coordinate of the screen. Default is center.
        :param title: Title of the screen.
        """

        # Update bgcolor attribute if specified
        if bgcolor is not None:
            self.attr['bgcolor'] = bgcolor

        # Update the starting position attributes if specified
        if start_x is not None and start_y is not None:
            self.attr['start_x'] = start_x
            self.attr['start_y'] = start_y

        # Setup Title of screen (title is not an 'attr')
        self.screen.title("ModernArt") if title is None else self.screen.title(f"{title}")

        # Setup screen attributes
        self.screen.bgcolor(self.attr["bgcolor"])  # Background-Color
        self.screen.setup(width=self.attr['width'],
                          height=self.attr['height'],
                          startx=self.attr['start_x'],
                          starty=self.attr['start_y'])  # Dimensions

    def exitonclick(self) -> None:
        """
        Closes the screen when it is clicked.
        """
        self.screen.exitonclick()

    def mainloop(self) -> None:
        """
        Runs the main loop of the screen.
        Keeps the window open until it is closed by the user.
        """
        self.screen.mainloop()
